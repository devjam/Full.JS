// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.FullJS.Sections.Section1 = (function(_super) {

    __extends(Section1, _super);

    function Section1() {
      this.onResize = __bind(this.onResize, this);

      this.update = __bind(this.update, this);

      this.init = __bind(this.init, this);
      return Section1.__super__.constructor.apply(this, arguments);
    }

    Section1.prototype.init = function() {
      var box, hh, i, rad, size, wh, _i, _results;
      this.container.css({
        overflow: "hidden"
      });
      size = FullJS.Util.window.size();
      this.bg = this.createItem({
        width: 1600,
        height: 1000,
        position: "absolute",
        top: 0,
        left: 0
      }, '<img src="images/bg_mesh.png" />');
      wh = size.width >> 1;
      hh = size.height >> 1;
      _results = [];
      for (i = _i = 1; _i <= 7; i = ++_i) {
        box = this["box" + i] = this.createItem({
          position: "absolute"
        }, '<img src="images/box' + i + '.png" />');
        rad = Math.random() * Math.PI * 2;
        box.x = Math.cos(rad) * size.width;
        box.y = Math.sin(rad) * size.height;
        box.offsetX = wh * (Math.random() * 0.7 + 0.3);
        _results.push(box.offsetY = hh * (Math.random() * 0.7 + 0.3));
      }
      return _results;
    };

    Section1.prototype.update = function(absolute, relative, ratio, width, height) {
      var box, h, hr, i, imgRatio, wr, _i, _results;
      wr = width / 1600;
      hr = height / 1000;
      imgRatio = wr < hr ? hr : wr;
      h = 1000 * imgRatio;
      this.bg.css({
        top: imgRatio === hr ? 0 : (height - h) * ratio,
        width: 1600 * imgRatio,
        height: h
      });
      _results = [];
      for (i = _i = 1; _i <= 7; i = ++_i) {
        box = this["box" + i];
        _results.push(box.css({
          left: box.x * ratio + box.offsetX,
          top: box.y * ratio + box.offsetY
        }));
      }
      return _results;
    };

    Section1.prototype.onResize = function(width, height) {
      if (this.isAutoMode) {
        switch (this.layoutType) {
          case FullJS.LAYOUT_TYPE_VERTICAL:
            this.container.height(height);
            this.length = height * this.autoLengthRatio;
            return this.offset = height * this.autoOffsetRatio;
          case FullJS.LAYOUT_TYPE_HORIZONAL:
            this.container.width(width);
            this.length = width * this.autoLengthRatio;
            return this.offset = width * this.autoOffsetRatio;
        }
      }
    };

    return Section1;

  })(this.FullJS.Sections.Base);

}).call(this);
